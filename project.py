import math
import numpy
from pprint import pprint
import itertools

data_stream = [[10.6729017233248,
                10.7192672065069,
                10.4668264919524,
                10.6623796476102,
                10.3624783283431,
                100.3717902475263,
                10.8465367439193,
                10.2138787316649,
                10.4101933820285,
                10.2052039663541,
                10.797760486033,
                10.6016810326304,
                10.0061543254266,
                10.0750654278693,
                30.0,
                10.4953638157124,
                10.4122552270827,
                10.724501692577,
                10.1349487730316,
                10.4783435731631,
                10.2924991084051,
                10.2590051115077,
                10.741892579717,
                10.2884813185632,
                10.8983423239382,
                10.7283474183585,
                10.3459424407871,
                10.7567181400131,
                10.619826382981,
                10.2826717091832,
                10.1765755715264,
                10.5658106704032,
                10.9884807469958,
                10.7625706632765,
                10.6267896016069,
                10.6833011303833,
                10.7003809352733,
                10.1931075960531,
                10.6395292335132,
                10.858549634742,
                10.6570532951663,
                10.7837435563352,
                10.4641392108144,
                10.044369634056,
                10.3125629132389,
                10.9513711397514,
                10.0123346657286,
                10.5197919687912,
                10.2668171669189,
                10.7024898287094],
               [20.6797086055673,
                20.3773215843962,
                20.7709916685806,
                20.9297507652164,
                20.5214739322568,
                20.3206333720944,
                20.2959248843502,
                20.9056500212549,
                20.011880686777,
                20.4087534737961,
                20.4259963194351,
                20.0721250440822,
                20.5896802478206,
                20.0109983815209,
                20.0573815006052,
                20.8426533767616,
                20.9285416674212,
                20.6452916097695,
                20.6907278862677,
                20.1906765950829,
                20.2719591779802,
                20.0845756089587,
                20.5745647984795,
                20.7071346362139,
                20.8253153117587,
                20.6825380383624,
                20.2175559994729,
                20.0328751810227,
                20.3769539373837,
                20.7097395537145,
                20.0,
                20.0,
                20.0,
                20.0,
                20.0,
                20.0,
                20.0,
                20.0,
                20.0,
                20.0,
                20.7536793758009,
                20.7022270955588,
                20.7501637587181,
                20.0285625738606,
                20.5323776361737,
                20.6819593398664,
                20.8985435232068,
                20.5020730760123,
                20.6013071034714,
                20.2541383084246],
               [15.8702012272612,
                15.0805957475064,
                15.4951703878062,
                15.5172722100457,
                15.6149882130562,
                15.5622296235539,
                15.9739525325211,
                15.6802587590261,
                15.6674438713616,
                15.9520347174766,
                15.0609835685859,
                15.544471347267,
                15.5317060959251,
                15.3303568639437,
                15.6753917210059,
                15.9118805991475,
                15.9589252227397,
                15.2262676486392,
                15.9658436170603,
                15.0440887779402,
                15.7504145027709,
                15.4519286820441,
                15.6225097350128,
                15.2705173695893,
                15.4230612623387,
                15.7245664899669,
                15.4173654726325,
                15.5061066227392,
                15.0615881598191,
                15.1112731722254,
                15.719715658591,
                15.2646590677669,
                15.4859691487744,
                15.6188412498297,
                15.8568925665286,
                15.718251315085,
                15.6682332139704,
                15.2230690750336,
                15.5988157068624,
                15.5708478571574,
                15.7208779491977,
                15.457748430748,
                15.2100452990697,
                15.8053526621277,
                15.9169080878091,
                15.0175890692528,
                15.8254994970472,
                15.918172479703,
                15.4526362247268,
                15.5002634621063],
               [25.0037656343982,
                25.8863966873962,
                25.8761345172979,
                25.6019745775928,
                25.337580886559,
                25.5164190637579,
                25.4459260889355,
                25.8620314267287,
                25.1764363221288,
                25.1619239873684,
                25.5089154781011,
                25.0882976766679,
                25.8650180559156,
                25.5083810654689,
                25.9481954378133,
                25.7542092362428,
                25.0742424727739,
                25.4127231209268,
                25.0097406018035,
                25.1650195247424,
                25.6865270304212,
                25.1152017010483,
                25.1570376196682,
                25.4780820948688,
                25.7717025949121,
                25.3423370785021,
                25.0661504514441,
                25.4820914853198,
                25.8065339695336,
                25.2901072141478,
                25.9501179624155,
                25.8762162870663,
                25.2179122346109,
                25.9276961637059,
                25.2119604896929,
                25.1220281991232,
                25.8681891173433,
                25.5485470287019,
                25.5037305463142,
                25.2252220988973,
                25.9914097233527,
                25.9956224803224,
                25.5838497464113,
                25.4256981085971,
                25.6857070462232,
                25.3459129294958,
                25.5480110129649,
                25.4005713081017,
                25.3299976090146,
                25.9765649672547],
               [11.0404994747272,
                11.0521019495214,
                11.8193925409424,
                11.2006607358872,
                11.0139962905982,
                11.7646352078886,
                11.4883190326753,
                11.1804992526308,
                11.7257815516644,
                11.6978089110044,
                11.0705226622277,
                11.8433757814946,
                11.2503980637411,
                11.8406822990591,
                11.4038172283748,
                11.2492194139391,
                11.8742532767666,
                11.4824760926333,
                11.9649815976069,
                11.5257299074838,
                11.6516466420783,
                11.5777817876779,
                11.3802641183522,
                11.9693531971822,
                11.2506912396081,
                11.5404090915861,
                11.408538551619,
                11.1112039755202,
                11.5760201476205,
                11.0317745412849,
                11.7859172564585,
                11.2905866427465,
                11.7878683978038,
                11.9675148498555,
                11.6666592218419,
                11.637733120051,
                11.593818883954,
                11.404775923536,
                11.5313046568018,
                11.1667653043064,
                11.2797744624302,
                11.4431305059947,
                11.0513877469092,
                11.6619202714265,
                11.5805792114729,
                11.9407037503296,
                11.0765552146907,
                11.1505582703191,
                11.7388141967658,
                11.4977379587808],
               [12.3996988805801,
                12.6175403322435,
                12.3759284217563,
                12.8024880031631,
                12.3628674573948,
                12.4738050685854,
                12.9164797204253,
                12.007832961954,
                12.375172696623,
                12.7177073332545,
                12.6416478051811,
                12.6112067576191,
                12.1841029460657,
                12.4908374619667,
                12.7852226236922,
                12.467015627437,
                12.4073143724896,
                12.830421040296,
                12.6321098257383,
                12.2948064210274,
                12.1328541775124,
                12.5426613527433,
                12.2243813979146,
                12.932454173599,
                12.4953422269314,
                12.0331360096242,
                12.5964408084062,
                12.8723294813657,
                12.5787090877748,
                12.0165833524311,
                12.8853037244398,
                12.7671216654752,
                12.1850431096235,
                12.0047778099912,
                12.5227865302032,
                12.0382058945856,
                12.2012330323611,
                12.0785774488791,
                12.3873327145125,
                12.5587343768656,
                12.6091634973737,
                12.443057220983,
                12.1326285839353,
                12.8067920718187,
                12.8968176827426,
                12.178863127998,
                12.6494399235291,
                12.3130119462467,
                12.6014741774178,
                12.6045967901547],
               [13.9806137348583,
                13.3827441561139,
                13.2914231105248,
                13.2668071525392,
                13.0626090316467,
                13.2319154954724,
                13.8465926138758,
                13.6071473767062,
                13.9086716176107,
                13.9995741620239,
                13.3538261214319,
                13.9593011348937,
                13.8425704628266,
                13.5755039440836,
                13.4616085866009,
                13.5399087142201,
                13.3779962088284,
                13.1090731995058,
                13.1135879329504,
                13.2876043516171,
                13.6263637797816,
                13.9005163409351,
                13.8749467922398,
                13.6412788536935,
                13.7852926256598,
                13.0435612152789,
                13.0026343344138,
                13.4597659536356,
                13.6863177029004,
                13.7641898887736,
                13.6493164481411,
                13.8010444968867,
                13.981637605704,
                13.4480483449634,
                13.7548182862742,
                13.5305990725421,
                13.4341091985417,
                13.020547053557,
                13.8572990149316,
                13.9558792011444,
                13.7350342871809,
                13.532588763659,
                13.0707876629357,
                13.5551789975253,
                13.6535285631086,
                13.8291008727025,
                13.6628483936821,
                13.7602871399668,
                13.4073302938364,
                13.4738732479765],
               [18.5056476128486,
                18.3247015917221,
                18.594881351194,
                18.1400316807269,
                18.2756415988095,
                18.7065869109221,
                18.1063204108537,
                18.4495621294139,
                18.5837192281616,
                18.1675415745363,
                18.1995382642286,
                18.4282913640608,
                18.8441398069953,
                18.3228481585448,
                18.3931592599562,
                18.3959715797323,
                18.9364373918773,
                18.1083387030119,
                18.5787680081955,
                18.4071218934403,
                18.2787719592006,
                18.6269991108872,
                18.8510535715584,
                18.6676798575993,
                18.3662774559371,
                18.3156742657827,
                18.6564648617858,
                18.6145281650458,
                18.5553252999167,
                18.2324873897016,
                18.2240889948724,
                18.8430021928636,
                18.5524741645639,
                18.0570612801785,
                18.8074976184281,
                18.0222928564804,
                18.9030419421636,
                18.7581286271148,
                18.282553982243,
                18.5316400612318,
                18.4252269840154,
                18.0535172884193,
                18.1879840027512,
                18.3242252165233,
                18.7005341838577,
                18.0660307040677,
                18.4250033579598,
                18.4855659657402,
                18.8516593902589,
                18.4355806139845]]

previous_channels_data = [[],[],[],[],[],[],[],[]]  # if not clean replace with []
previous_clean_data = []
# [[18.5056476128486,
#                 18.3247015917221,
#                 18.594881351194,
#                 18.1400316807269,
#                 18.2756415988095,
#                 18.7065869109221,
#                 18.1063204108537,
#                 18.4495621294139,
#                 18.5837192281616,
#                 18.1675415745363],
#                 [18.1995382642286,
#                 18.4282913640608,
#                 18.8441398069953,
#                 18.3228481585448,
#                 18.3931592599562,
#                 18.3959715797323,
#                 18.9364373918773,
#                 18.1083387030119,
#                 18.5787680081955,
#                 18.4071218934403],
#                 [18.2787719592006,
#                 18.6269991108872,
#                 18.8510535715584,
#                 18.6676798575993,
#                 18.3662774559371,
#                 18.3156742657827,
#                 18.6564648617858,
#                 18.6145281650458,
#                 18.5553252999167,
#                 18.2324873897016],
#                 [18.2240889948724,
#                 18.8430021928636,
#                 18.5524741645639,
#                 18.0570612801785,
#                 18.8074976184281,
#                 18.0222928564804,
#                 18.9030419421636,
#                 18.7581286271148,
#                 18.282553982243,
#                 18.5316400612318],
#                 [18.4252269840154,
#                 18.0535172884193,
#                 18.1879840027512,
#                 18.3242252165233,
#                 18.7005341838577,
#                 18.0660307040677,
#                 18.4250033579598,
#                 18.4855659657402,
#                 18.8516593902589,
#                 18.4355806139845]]


# k is new data from all channels
# finally k will add to previous_channels_data

# const values
min_pts = 1
k_i_len = 10
lof_threshold = 5


def XC(t, p):
    return 1 if previous_channels_data[p][t] else 0


def variance_norm(k, p):
    variance = numpy.var(k[p])
    makhraj_sum = 0
    makhraj_count = 0

    for i_t, t in enumerate(previous_clean_data):
        if XC(i_t, p):
            makhraj_sum += numpy.var(t)
            makhraj_count += 1

    if not makhraj_count == 0:
        makhraj = makhraj_sum / makhraj_count
    else:
        makhraj = 1

    return variance / makhraj


def f_H(k, p, q):
    abs(variance_norm(k, p) - variance_norm(k, q))


def f_L(k, p, q):
    variance_norm_p = abs(variance_norm(k, p))
    variance_norm_q = abs(variance_norm(k, q))

    if variance_norm_p >= variance_norm_q:
        f = variance_norm_p / variance_norm_q
    else:
        f = variance_norm_q / variance_norm_p
    return f


def d(k, p, q):

    return max(variance_norm(k, p), variance_norm(k, q))


def min_pts_distance(k, p, min_pts):
    # n is k in k-distance
    distance_list = sorted([d(k, p, q) for q, _ in enumerate(k) if p != q])
    # distance_list = sorted(distance_list, key=lambda d: next(iter(d.values())))

    return distance_list[min_pts - 1]


def min_pts_nearest_nighbord(k, p, min_pts):
    # n is k in k-nn

    distance_list = [{q: d(k, p, q)} for q in range(len(k)) if p != q]
    distance_list = sorted(distance_list, key=lambda d: next(iter(d.values())))

    return distance_list[:min_pts]


def reach_dist(k, p, o, min_pts):
    return max(min_pts_distance(k, o, min_pts), d(k, p, o))


def lrd(k, p, min_pts):
    makhraj_sum = 0
    min_pts_nearest = min_pts_nearest_nighbord(k, p, min_pts)
    for o in min_pts_nearest:
        makhraj_sum += reach_dist(k, p, next(iter(o)), min_pts)

    makhraj = makhraj_sum / len(min_pts_nearest)
    return 1 / makhraj


def lof(k, p, min_pts):
    min_pts_nearest = min_pts_nearest_nighbord(k, p, min_pts)
    sorat = 0
    for o in min_pts_nearest:
        sorat += lrd(k, next(iter(o)), min_pts) / lrd(k, p, min_pts)

    return sorat / len(min_pts_nearest)


def findsubsets(S):
    result = list(set(itertools.combinations(S, 2)))
    return [set(i) for i in result]

cursor = 0

while cursor < len(data_stream[0]):
    k = [c[cursor:cursor + k_i_len] for c in data_stream]
    tmp_previous_channels_data = []
    tmp_previous_clean_data = []
    clean_tag = False

    cursor += k_i_len
    for c in range(len(k)):
        tmp_previous_channels_data.append([])
        if lof(k, c, min_pts) < lof_threshold:
            tmp_previous_channels_data[c].append(k[c])
            if not clean_tag:
                tmp_previous_clean_data.append(k[c])
                clean_tag = True
        else:
            print(k[c][0], lof(k, c, min_pts))
            print(previous_channels_data[c])
            if all([not i for i in previous_channels_data[c]]):
                print(c , 'bad channel')
            tmp_previous_channels_data[c].append([])

    for c, value in enumerate(tmp_previous_channels_data):
        previous_channels_data[c] += value

    previous_clean_data += tmp_previous_clean_data






    print('****')




